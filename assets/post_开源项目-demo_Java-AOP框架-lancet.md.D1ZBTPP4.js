import{_ as s,o as a,c as i,a6 as n}from"./chunks/framework.DnJfIKBR.js";const g=JSON.parse('{"title":"Java-AOP框架-lancet","description":"","frontmatter":{"title":"Java-AOP框架-lancet","layout":"doc","aside":false},"headers":[],"relativePath":"post/开源项目-demo/Java-AOP框架-lancet.md","filePath":"post/开源项目-demo/Java-AOP框架-lancet.md","lastUpdated":1715348268000}'),l={name:"post/开源项目-demo/Java-AOP框架-lancet.md"},t=n(`<h1 id="java-aop框架-lancet" tabindex="-1">Java-AOP框架-lancet <a class="header-anchor" href="#java-aop框架-lancet" aria-label="Permalink to &quot;Java-AOP框架-lancet&quot;">​</a></h1><p>Lancet 是一个轻量级Android AOP框架。</p><ul><li>编译速度快, 并且支持增量编译.</li><li>简洁的 API, 几行 Java 代码完成注入需求.</li><li>没有任何多余代码插入 apk.</li><li>支持用于 SDK, 可以在SDK编写注入代码来修改依赖SDK的App.</li></ul><h2 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>这个项目有点老了,笔者测试通过的如下配置</p><p>在根目录的 <code>build.gradle</code> 添加:<br><strong>buildscript需要添加在plugins之前</strong></p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buildscript {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        classpath </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.android.tools.build:gradle:3.3.2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        classpath </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.bytedance.tools.lancet:lancet-plugin-asm6:1.0.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意: Lancet 1.0.5 及以上版本只支持 gradle 3.3.2 及以上版本。</p><p>在 app 目录的&#39;build.gradle&#39; 添加：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alias(libs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">android</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">application)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;me.ele.lancet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compileOnly </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;me.ele:lancet-base:1.0.6&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在根目录/build.gradle 代码最上方添加 (buildscript需要添加在plugins之前)</p><div class="language-gradle vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gradle</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>Lancet 使用注解来指定代码织入的规则与位置。</p><p>首先看看基础API使用:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TargetClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android.util.Log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anyName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String tag, String msg){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lancet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Origin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里有几个关键点:</p><ul><li><code>@TargetClass</code> 指定了将要被织入代码目标类 <code>android.util.Log</code>.</li><li><code>@Proxy</code> 指定了将要被织入代码目标方法 <code>i</code>.</li><li>织入方式为<code>Proxy</code>(将在后面介绍).</li><li><code>Origin.call()</code> 代表了 <code>Log.i()</code> 这个目标方法.</li></ul><p>所以这个示例Hook方法的作用就是 将代码里出现的所有 <code>Log.i(tag,msg)</code> 代码替换为<code>Log.i(tag,msg + &quot;lancet&quot;)</code></p>`,20),e=[t];function p(h,k,d,o,r,c){return a(),i("div",null,e)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
